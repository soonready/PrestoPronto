#Name: Prestopronto.py
# Purpose: Gui to perform XAFS data reduction.
# Author: C. Prestipino based
#
# Copyright 2009 ESRF
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL ILLINOIS INSTITUTE OF TECHNOLOGY BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Except as contained in this notice, the name of ESRF
# shall not be used in advertising or otherwise to promote
# the sale, use or other dealings in this Software without prior written
# authorization from ESRF.

import ttk
from   Tkinter import *
import tkFileDialog
import bm29                                                                           
import numpy
import utility as ut
import bm29_tools as bt
import exapy
import os
import ConfigParser
#import zipfile for zipped files
import text
from scipy import interpolate
from PyMca.specfile import Specfile

import PPset
import PPInput
import PPAvesel
import PPXanes
import PPExafs




      
global __verbose__                                                                    
__verbose__=False#True#
global __version__
__version__= "b.0.9.0"
global inivarst
inivar=ConfigParser.ConfigParser()
global num_deriv
num_deriv=True

######################################################################################################
##################################       Menu    #####################################################
class mymenu():
    def __init__(self,genitore):
        self.genitore=genitore
        self.menubar = Menu(genitore)
        # create a pulldown menu, and add it to the menu bar
        self.filemenu = Menu(self.menubar, tearoff=0)


        self.filemenu.add_command(label="Open singlefile", command=self.opensfile)
        self.filemenu.add_command(label="Exit", command=self.quit1)
        self.menubar.add_cascade(label="File", menu=self.filemenu)
        
        ##########################single file#########################################################
        self.optionmenu = Menu(self.menubar, tearoff=0)
        self.menubar.add_cascade(label="Option", menu=self.optionmenu)
        
        self.singlefile = Menu(self.optionmenu, tearoff=0)         
        self.optionmenu.add_cascade(label="singlefile", menu=self.singlefile)
 
        self.singlefile.add_radiobutton(label="singlefile_on   ", command=self.singlefile_on )
        self.singlefile.add_radiobutton(label="singlefile_off  ", command=self.singlefile_off)
        self.singlefile.invoke(index=0)
        
        self.derivative = Menu(self.optionmenu, tearoff=0)         
        self.optionmenu.add_cascade(label="derivative", menu=self.derivative)
 
        self.derivative.add_radiobutton(label="Numeric_Deriv   ", command= lambda x=True: self.num_deriv(x) )
        self.derivative.add_radiobutton(label="Spline_Deriv    ", command= lambda x=False: self.num_deriv(x) )
        self.derivative.invoke(index=0)        
        ##########################single file#########################################################        
        
        self.helpmenu = Menu(self.menubar, tearoff=0)
        self.helpmenu.add_command(label="About", command=self.version)
        self.menubar.add_cascade(label="Help", menu=self.helpmenu)
        
        # display the menu
        genitore.config(menu=self.menubar)
    def num_deriv(self, x): 
        global num_deriv
        if PPset.x: num_deriv=True
        else: num_deriv=False
    def singlefile_on(self):  
        ut.__singlefile__=True
    def singlefile_off(self):
        ut.__singlefile__=False
        
    def version(self):
        print "\n version %s \n" %__version__
        
    def quit1(self):
            print "\n\nfinally Santiago read the menu ; )\nthank you again Carmelo\n"
            writeini()
            self.genitore.quit()
    def opensfile(self):
        global filesel_spectra
        PPset.filesel_spectra=[]        
        filenames=ut.browse_single()
        os.chdir(os.path.dirname(filenames))
        buffero=bm29.disperati(filenames)
        buffero.energy=buffero.data[:,0]
        buffero.bm29ize()
        PPset.filesel_spectra=PPset.listum(buffero.spectra)
        del buffero       


#########################################################################################################
####################################     QE cal      ####################################################

#
#########################################################################################################
##################################       Avesel     #####################################################
#see module PPAvesel
#########################################################################################################
####################################     XANES       ####################################################
#see module PPXANES
####################################   EXAFS/FT #########################################################
#see module PPExafs
########################################################################################################
class QFeffGenerate():
    def __init__(self, genitore):
        self.genitore=genitore
        self._geometry= StringVar()
        self._Absorber= StringVar()
        self._Scatter=  StringVar()
        self._bond = StringVar()
        self._edge = StringVar()
        self._edge.set("K")
        self._geometry.set("Tetrahedral")
        self._Absorber.set("Ti")
        self._Scatter.set("O")
        self._bond.set("1.81")
        LElfpack = {"side" : LEFT, "padx" :3, "ipadx" :0 }; LEepack ={"side" : LEFT, "expand" : NO, "padx" :0}

        self.quadro_genpath = LabelFrame(genitore, text = "Generate a sigle scattering path")
        self.quadro_genpath.pack(side = TOP, expand = YES, fill = X , anchor = W, ipadx = 5, ipady = 5)
        self.quadro_genpath1 = Frame(self.quadro_genpath)
        self.quadro_genpath1.pack(side = TOP, expand = YES, fill = X , anchor = W)
        self.quadro_geometry = LabelFrame(self.quadro_genpath1, text = "Geometry")
        self.quadro_geometry.pack(side = LEFT, expand = YES, anchor = W, ipadx = 5, ipady = 5)
        self.combo_geometry= ttk.Combobox(self.quadro_geometry, state="readonly",
                    textvariable=self._geometry,values=('Tetrahedral','Sq Planar','Octahedral','Icosahedral'))

        self.combo_geometry.pack(side=LEFT)
        self.quadro_edge = LabelFrame(self.quadro_genpath1, text = "Edge")
        self.quadro_edge.pack(side = LEFT, expand = YES,  anchor = W, ipadx = 5, ipady = 5)
        self.combo_edge= ttk.Combobox (self.quadro_edge, state="readonly",
                                textvariable=self._edge,values=('K', 'L1', 'L2', 'L3'))
        
        self.combo_edge.pack(side=LEFT)

        self.quadro_genpath2 = Frame(self.quadro_genpath)
        self.quadro_genpath2.pack(side = TOP, expand = YES, fill = X , anchor = W)
        self.Absorber_LE = ut.LabelEntry(self.quadro_genpath2, Ltext = "Absober",       EtextVar= self._Absorber, Ewith = 5, SLtext ="",
                                                                            labelframepack =LElfpack,entrypack=LEepack)
        self.Scatterer =   ut.LabelEntry(self.quadro_genpath2, Ltext = "Scatterer",     EtextVar= self._Scatter,  Ewith = 5, SLtext ="",
                                                                            labelframepack =LElfpack,entrypack=LEepack)
        self.Bond_LE =     ut.LabelEntry(self.quadro_genpath2, Ltext = "Bond Distance", EtextVar= self._bond,     Ewith = 7, SLtext ="",
                                                                            labelframepack =LElfpack,entrypack=LEepack)
        self.quadro_genpath3 = Frame(self.quadro_genpath)
        self.quadro_genpath3.pack(side = TOP, expand = YES, fill = X , anchor = W, ipady=2)
        self.pulsanteA = Button(self.quadro_genpath3, command = self.feffgenerate,  text = "Generate....", background ="pale goldenrod")
        self.pulsanteA.pack(side = LEFT, expand = NO, ipadx = 5, ipady = 3)
        Frame(genitore).pack(side = TOP, expand = YES, fill = X , anchor = W, ipady=2, pady=5)
        self.genpath=ut.Browse_filename(genitore, "Or select one", singlefile=1)
        self.genpath.pulsanteA.configure(background ="pale goldenrod")
        self.genpath.filenames=[]
        Frame(genitore).pack(side = TOP, expand = YES, fill = X , anchor = W, ipady=2, pady=10)
        Define = Button(genitore, command = self.quit,  text = "Define and Quit", background ="green")
        Define.pack(side =TOP, anchor = W, ipady=5)


    def quit(self):
        self.active=False
        self.genitore.destroy()



    def feffgenerate(self):              
        geometry = self._geometry.get()
        edge = self._edge.get()
        bond = float(self._bond.get())
        Absorber = self._Absorber.get()
        Scatter = self._Scatter.get()
        feffinput=exapy.QSFEFF(Absorber, Scatter, bond , edge, geometry)
        fefffile=tkFileDialog.asksaveasfile(title= "directory for save feff input end output",
                                                initialfile ="feff",
                                                defaultextension = "inp")
        Start_Dir=os.getcwd()
        directory= os.path.dirname(fefffile.name)
        fefffile.write(feffinput)
        fefffile.close()
        print "*************************************************"
        print "feff6l \"%s\"" %fefffile.name
        os.chdir(directory)
        if os.name =="nt":
            os.system(os.path.join(inivar.get("PrestoPronto", "PrestoPronto_Dir"),"feff6l.exe").join("\"\""))
        elif os.name =="posix":
            os.system(feff6)
        os.chdir(Start_Dir)
        print "*************************************************"
        self.genpath.filenames.append(fefffile.name[:-4] + "0001.dat")
        self.genitore.focus()

        #print self.genpath.filenames[0]
########################################################################################################
class FIT:
    def __init__(self, genitore):
      #-------------------------------    declare    ----------------------------------------------
        self.plotfit    = StringVar()
        self.label_path1 =StringVar()         #define the label of path1
        self.label_path2 =StringVar()         #define the label of path2
        self._check_n1  = IntVar()            #define if the corresponding parameter is refined
        self._check_s1  = IntVar()            #define if the corresponding parameter is refined
        self._check_r1  = IntVar()            #define if the corresponding parameter is refined
        self._check_e1  = IntVar()            #define if the corresponding parameter is refined
        self._check_n2  = IntVar()            #define if the corresponding parameter is refined
        self._check_s2  = IntVar()            #define if the corresponding parameter is refined
        self._check_r2  = IntVar()            #define if the corresponding parameter is refined
        self._check_e2  = IntVar()            #define if the corresponding parameter is refined
        self._check_path1 = IntVar()          #def. if corresponding path is used
        self._check_path2 = IntVar()          #def. if corresponding path is used
        self._s1     = StringVar()            #entry for parameters
        self._r1     = StringVar()            #entry for parameters
        self._e1     = StringVar()            #entry for parameters
        self._n1     = StringVar()            #entry for parameters
        self._s2     = StringVar()            #entry for parameters
        self._r2     = StringVar()            #entry for parameters
        self._e2     = StringVar()            #entry for parameters
        self._n2     = StringVar()            #entry for parameters
        self._kstart = StringVar()            #entry for fit parameters
        self._kend   = StringVar()            #entry for fit parameters
        self._Rstart = StringVar()            #entry for fit parameters
        self._Rend   = StringVar()            #entry for fit parameters
        self._kweigth= IntVar()               #entry for fit parameters
        self._Fspace = StringVar()            #entry for fit parameters



        packLabelFrame = {"side" : LEFT,  "expand" : YES, "anchor" : W, "pady" : 3, "ipadx" :3}
        packEntry      = {"side" : LEFT,   "anchor" : W, "pady" : 3, "padx" : 0, "fill" : X }   # "expand" :
        LElfpack = {"side" : LEFT, "padx" :3, "ipadx" :0 }; LEepack ={"side" : LEFT, "expand" : NO, "padx" :0}
      #---------------------------------  set      ------------------------------------------
        self._kstart.set(0)
        self._kend.set(0)
        self._Rstart.set(0)
        self._Rend.set(6)
        self._kweigth.set(2)
        self._kend.set("k max")
        self._Fspace.set("R")
        self.plotfit.set("R")
        self.kstart =  0
        self.kend   =  0
        self.Rstart =  0
        self.Rend   =  6


      #############------------------------------Page 1----------------------------------------------------
        self.nb = ttk.Notebook(genitore)
        self.nb.pack(fill=BOTH)
        self.p1 = Frame(self.nb)
        self.nb.add(self.p1 , text="Param.")
 
        
        
      #------------------------------  Param  -----------------------------------------------------
        self.quadro_Parameter = LabelFrame(self.p1, text = "Fit parameter")    #,text = "Correction"
        self.quadro_Parameter.pack(side = TOP,  fill = X, pady= 3, ipadx = 5, ipady = 3)
        self.quadro_k_lim = LabelFrame(self.quadro_Parameter, text = "k Range Limits")
        self.quadro_k_lim.pack(**packLabelFrame)
        self._entry_kstart= Entry(self.quadro_k_lim, width = 6, textvariable=self._kstart)
        self._entry_kstart.pack(**packEntry)
        self._entry_kend= Entry(self.quadro_k_lim, width = 6, textvariable  =self._kend  )
        self._entry_kend.pack(**packEntry)
        self.quadro_R_lim = LabelFrame(self.quadro_Parameter, text = "R Range Limits")
        self.quadro_R_lim.pack(**packLabelFrame)
        self._entry_Rstart= Entry(self.quadro_R_lim, width = 6, textvariable=self._Rstart)
        self._entry_Rstart.pack(**packEntry)
        self._entry_Rend= Entry(self.quadro_R_lim, width = 6, textvariable=  self._Rend)
        self._entry_Rend.pack(**packEntry)
        self.quadro_spin_kweigth = LabelFrame(self.quadro_Parameter, text = "k_weigth")
        self.quadro_spin_kweigth.pack(**packLabelFrame)
        self.spin_kweigth = Spinbox(self.quadro_spin_kweigth, from_ = 0, to = 3, textvariable= self._kweigth, width = 5)
        self.spin_kweigth.pack(**packEntry)
        self.quadro_fit_space = LabelFrame(self.quadro_Parameter, text = "Fit space")
        self.quadro_fit_space.pack(**packLabelFrame)
        self.combo_fit_space= ttk.Combobox(self.quadro_fit_space, state="readonly", textvariable=self._Fspace,values=('k','R','q'))
        self.combo_fit_space.pack(**packEntry)

      #--------------------------------------Path 1----------------------------------------------------
        self.quadro_Path1 = LabelFrame(self.p1, text = "Fit parameter")    #,text = "Correction"
        self.quadro_Path1.pack(side = TOP,  fill = X, pady= 1, ipadx = 0, ipady = 0)
        self.pathselect_1=ut.Browse_filename(self.quadro_Path1, "Path 1", singlefile=1)
        self.pathselect_1.quadro_selezione.pack(side = TOP,  ipadx = 0, ipady = 3 )
        self.pathselect_1.pulsanteA.configure(command = self.browse_command2_1, text="Path1", width=8, background ="pale goldenrod" )
        self.quadro_Path1_var = Frame(self.quadro_Path1)
        self.quadro_Path1_var.pack(side = TOP,  fill = X, pady= 0, ipadx = 0, ipady = 0)
        self.path1_Buttoncheck = Checkbutton(self.quadro_Path1_var, text="Use   " ,variable=self._check_path1 )
        self.path1_Buttoncheck.pack(side = LEFT,  fill = Y ,anchor = W, ipady = 1, padx = 0)
        self.n1_LE = ut.LabelEntry(self.quadro_Path1_var, Ltext = "n1", EtextVar= self._n1, Ewith = 5, SLtext ="",
                                   labelframepack =LElfpack,entrypack=LEepack)
        self.n1_check = Checkbutton(self.n1_LE.LabFr, text="",variable=self._check_n1)
        self.n1_check.pack(side = LEFT,  fill = Y ,anchor = W, ipady = 1, padx = 0)
        self.r1_LE = ut.LabelEntry(self.quadro_Path1_var, Ltext = "r1", EtextVar= self._r1, Ewith = 5, SLtext ="",
                                   labelframepack =LElfpack,entrypack=LEepack)
        self.r1_check = Checkbutton(self.r1_LE.LabFr, text="",variable=self._check_r1)
        self.r1_check.pack(side = LEFT,  fill = Y ,anchor = W, ipady = 1, padx = 0)
        self.s1_LE = ut.LabelEntry(self.quadro_Path1_var, Ltext = "s1", EtextVar= self._s1, Ewith = 5, SLtext ="",
                                   labelframepack =LElfpack,entrypack=LEepack)
        self.s1_check = Checkbutton(self.s1_LE.LabFr, text="" ,variable=self._check_s1 )
        self.s1_check.pack(side = LEFT,  fill = Y ,anchor = W, ipady = 1, padx = 0)
        self.e1_LE = ut.LabelEntry(self.quadro_Path1_var, Ltext = "e1", EtextVar= self._e1, Ewith = 5, SLtext ="",
                                   labelframepack =LElfpack,entrypack=LEepack)
        self.e1_check = Checkbutton(self.e1_LE.LabFr ,variable=self._check_e1 )
        self.e1_check.pack(side = LEFT,  fill = Y ,anchor = W, ipady = 1, padx = 1)

      #--------------------------------------Path 2----------------------------------------------------
        self.quadro_Path2 = LabelFrame(self.p1, text = "Fit parameter")    #,text = "Correction"
        self.quadro_Path2.pack(side = TOP,  fill = X, pady= 1, ipadx = 0, ipady = 0)
        self.pathselect_2=ut.Browse_filename(self.quadro_Path2, "Path 2", singlefile=1)
        self.pathselect_2.quadro_selezione.pack(side = TOP,ipady = 2)
        self.pathselect_2.pulsanteA.configure(command = self.browse_command2_2, text="Path2", width=8, background ="pale goldenrod" )
        self.quadro_Path2_var = Frame(self.quadro_Path2)
        self.quadro_Path2_var.pack(side = TOP,  fill = X, pady= 0, ipadx = 0, ipady = 0)
        self.path1_Buttoncheck = Checkbutton(self.quadro_Path2_var, text="Use   " ,variable=self._check_path2 )
        self.path1_Buttoncheck.pack(side = LEFT,  fill = Y ,anchor = W, ipady = 1, padx = 0)
        self.n2_LE = ut.LabelEntry(self.quadro_Path2_var, Ltext = "n2", EtextVar= self._n2, Ewith = 5, SLtext ="",
                                   labelframepack =LElfpack,entrypack=LEepack)
        self.n2_check = Checkbutton(self.n2_LE.LabFr, text="" ,variable=self._check_n2 )
        self.n2_check.pack(side = LEFT,  fill = Y ,anchor = W, ipady = 1, padx = 0)
        self.r2_LE = ut.LabelEntry(self.quadro_Path2_var, Ltext = "r2", EtextVar= self._r2, Ewith = 5, SLtext ="",
                                   labelframepack =LElfpack,entrypack=LEepack)
        self.r2_check = Checkbutton(self.r2_LE.LabFr, text="" ,variable=self._check_r2 )
        self.r2_check.pack(side = LEFT,  fill = Y ,anchor = W, ipady = 1, padx = 0)
        self.s2_LE = ut.LabelEntry(self.quadro_Path2_var, Ltext = "s2", EtextVar= self._s2, Ewith = 5, SLtext ="",
                                   labelframepack =LElfpack,entrypack=LEepack)
        self.s2_check = Checkbutton(self.s2_LE.LabFr, text="" ,variable=self._check_s2 )
        self.s2_check.pack(side = LEFT,  fill = Y ,anchor = W, ipady = 1, padx = 0)
        self.e2_LE = ut.LabelEntry(self.quadro_Path2_var, Ltext = "e2", EtextVar= self._e2, Ewith = 5, SLtext ="",
                                   labelframepack =LElfpack,entrypack=LEepack)
        self.e2_check = Checkbutton(self.e2_LE.LabFr ,variable=self._check_e2 )
        self.e2_check.pack(side = LEFT,  fill = Y ,anchor = W, ipady = 1, padx = 1)

      #--------------------------------------Perform----------------------------------------------------
        self.quadro_perform = LabelFrame(self.p1)    #,text = "Correction"
        self.quadro_perform.pack(side = BOTTOM,  fill = X, expand =YES)
        self.button_fit_per = Button(self.quadro_perform,
                                      command = self.perform,
                                      text = "Perform" ,
                                      background = "green",
                                      width = 10,
                                      padx = "3m",
                                      pady = "2m")
        self.button_fit_per.pack(side = LEFT, anchor = W, padx = 5, pady = 5)
        Frame(self.quadro_perform).pack(side = LEFT, expand =Y)
        self.radioframe = Frame(self.quadro_perform)
        self.radioframe.pack(side = LEFT)
        self.radio_plot_q= Radiobutton(self.radioframe, text="k", variable=self.plotfit, value="k",command = self.changeplot)
        self.radio_plot_q.pack(side= TOP,  anchor=E)
        self.radio_plot_r= Radiobutton(self.radioframe, text="R", variable=self.plotfit, value="R",command = self.changeplot)
        self.radio_plot_r.pack(side= TOP,  anchor=E)
        self.Fit_PlSa_But=ut.PloteSaveB(self.quadro_perform, ext="" ,comment= None, title="FIT Plot")

      ############---------------------------Page 2----------------------------------------------------
        self.p2 = Frame(self.nb)
        self.nb.add(self.p2, text="Plot FitVar")
        self.nb.pack(fill=BOTH)

        self.quadro_PlotP1 = LabelFrame(self.p2, text =self.label_path1)
        self.quadro_PlotP1.pack(side = TOP, expand = YES, anchor=N, fill =X)
        self.quadro_PlotP1_1 = Frame(self.quadro_PlotP1)
        self.quadro_PlotP1_1.pack(side = TOP, expand = YES, anchor=N, fill=X)
        self.quadro_n1Bu= LabelFrame(self.quadro_PlotP1_1, text="n1")
        self.quadro_n1Bu.pack(side = LEFT, expand=Y, padx = 3, fill =X)
        self.n1_PlSa_But=ut.PloteSaveB(self.quadro_n1Bu, ext="" ,comment= None, title="n 1")
        self.quadro_r1Bu= LabelFrame(self.quadro_PlotP1_1, text="r1")
        self.quadro_r1Bu.pack(side = LEFT, expand=Y, padx = 3, fill =X)
        self.r1_PlSa_But=ut.PloteSaveB(self.quadro_r1Bu, ext="" ,comment= None, title="r 1")
        self.quadro_PlotP1_2 = Frame(self.quadro_PlotP1)
        self.quadro_PlotP1_2.pack(side = TOP, fill=X)
        self.quadro_s1Bu= LabelFrame(self.quadro_PlotP1_2, text="s1")
        self.quadro_s1Bu.pack(side = LEFT, expand=Y, padx = 3, fill =X)
        self.s1_PlSa_But=ut.PloteSaveB(self.quadro_s1Bu, ext="" ,comment= None, title="s 1")
        self.quadro_e1Bu= LabelFrame(self.quadro_PlotP1_2, text="e1")
        self.quadro_e1Bu.pack(side = LEFT, expand=Y, padx = 3, fill =X)
        self.e1_PlSa_But=ut.PloteSaveB(self.quadro_e1Bu, ext="" ,comment= None, title="e 1")

        self.quadro_PlotP2 = LabelFrame(self.p2, text =self.label_path2)
        self.quadro_PlotP2.pack(side = TOP, expand = YES, anchor=N, fill =X)
        self.quadro_PlotP2_1 = Frame(self.quadro_PlotP2)
        self.quadro_PlotP2_1.pack(side = TOP, expand = YES, anchor=N, fill=X)
        self.quadro_n2Bu= LabelFrame(self.quadro_PlotP2_1, text="n1")
        self.quadro_n2Bu.pack(side = LEFT, expand=Y, padx = 3, fill =X)
        self.n2_PlSa_But=ut.PloteSaveB(self.quadro_n2Bu, ext="" ,comment= None, title="n 1")
        self.quadro_r2Bu= LabelFrame(self.quadro_PlotP2_1, text="r1")
        self.quadro_r2Bu.pack(side = LEFT, expand=Y, padx = 3, fill =X)
        self.r2_PlSa_But=ut.PloteSaveB(self.quadro_r2Bu, ext="" ,comment= None, title="r 1")
        self.quadro_PlotP2_2 = Frame(self.quadro_PlotP2)
        self.quadro_PlotP2_2.pack(side = TOP, fill=X)
        self.quadro_s2Bu= LabelFrame(self.quadro_PlotP2_2, text="s1")
        self.quadro_s2Bu.pack(side = LEFT, expand=Y, padx = 3, fill =X)
        self.s2_PlSa_But=ut.PloteSaveB(self.quadro_s2Bu, ext="" ,comment= None, title="s 1")
        self.quadro_e2Bu= LabelFrame(self.quadro_PlotP2_2, text="e1")
        self.quadro_e2Bu.pack(side = LEFT, expand=Y, padx = 3, fill =X)
        self.e2_PlSa_But=ut.PloteSaveB(self.quadro_e2Bu, ext="" ,comment= None, title="e 1")



    def browse_command2_1(self):
        Path_Quadro=Toplevel()
        path1=QFeffGenerate(Path_Quadro)
        Path_Quadro.wait_window()
        self.pathselect_1.filenames=path1.genpath.filenames
        self.pathselect_1.name=os.path.basename(path1.genpath.filenames[0])
        self.path1 = (exapy.path(self.pathselect_1.filenames[0]))
        self.label_path1 = self.pathselect_1.name + "      reff =" + str(self.path1.reff)+"  "
        self.label_path1+= self.path1.geom+"  nleg="+str(self.path1.nlegs)
        self.pathselect_1.labelfiletext.set(self.label_path1)
        self._n1.set(self.path1.degen_start)
        self._r1.set(self.path1.reff)
        self._e1.set(self.path1.e0_start)
        self._s1.set(self.path1.ss2_start)
        self._check_n1.set(1)
        self._check_s1.set(1)
        self._check_r1.set(1)
        self._check_e1.set(1)
        self._check_path1.set(1)
        self.quadro_PlotP1.configure(text=self.label_path1)


    def browse_command2_2(self):
        Path_Quadro=Toplevel()
        path1=QFeffGenerate(Path_Quadro)
        Path_Quadro.wait_window()
        self.pathselect_1.filenames=path1.genpath.filenames
        self.pathselect_1.name=os.path.basename(path1.genpath.filenames[0])
        self.path2 = (exapy.path(self.pathselect_1.filenames[0]))
        self.label_path2 = self.pathselect_1.name + "      reff =" + str(self.path1.reff)+"  "
        self.label_path2+= self.path1.geom+"  nleg="+str(self.path1.nlegs)
        self.pathselect_2.labelfiletext.set(self.label_path2)
        self._n2.set(self.path2.degen_start)
        self._r2.set(self.path2.reff)
        self._e2.set(self.path2.e0_start)
        self._s2.set(self.path2.ss2_start)
        self._check_n2.set(1)
        self._check_s2.set(1)
        self._check_r2.set(1)
        self._check_e2.set(1)
        self._check_path2.set(1)




    def perform(self):
        path=list()
        kmin      =  float(self._kstart.get())
        try:
            kmax =  float(self._kend.get())
        except ValueError:
            kmax=max(PPset.spectra[0].k)
        rmin      =  float(self._Rstart.get())
        rmax      =  float(self._Rend.get())
        kweight   =  self._kweigth.get()
        fit_space =  self._Fspace.get()
        if self._check_path1:
            if self._check_n1.get(): self.path1.degen_minimize=  "guess"
            else:              self.path1.degen_minimize=  "def"
            if self._check_r1.get(): self.path1.delr_minimize=  "guess"
            else:              self.path1.r_minimize=  "def"
            if self._check_e1.get(): self.path1.e0_minimize=  "guess"
            else:              self.path1.e0_minimize=  "def"
            if self._check_s1.get(): self.path1.ss2_minimize=  "guess"
            else:              self.path1.ss2_minimize=  "def"
            path.append(self.path1)
            self.path1.degen_start=   float(self._n1.get())
            self.path1.e0_start=      float(self._e1.get())
            self.path1.ss2_start =    float(self._s1.get())
            self.path1.r_start=       float(self._r1.get())
        if self._check_path2.get():
            path.append(self.path2)
            if self._check_n2.get(): self.path2.degen_minimize=  "guess"
            else:              self.path2.degen_minimize=  "def"
            if self._check_r2.get(): self.path2.delr_minimize=  "guess"
            else:              self.path2.r_minimize=  "def"
            if self._check_e2.get(): self.path2.e0_minimize=  "guess"
            else:              self.path2.e0_minimize=  "def"
            if self._check_s2.get(): self.path2.ss2_minimize=  "guess"
            else:              self.path2.ss2_minimize=  "def"
            self.path2.degen_start=   float(self._n2.get())
            self.path2.e0_start=      float(self._e2.get( ))
            self.path2.ss2_start =    float(self._s2.get())
            self.path2.r_start=       float(self._r2.get())
      #---------------------------Fit --------------------------------
        print kmin
        for item in PPset.spectra:
            item.FT_F(kmin , 0 ,kmax, .3, kweight,
                           "hanning")
            item.FIT(kmin, kmax, rmin, rmax, .3, kweight,
                        "hanning", fit_space, path)
      #---------------------------Post Fit --------------------------------
        self.Fit_PlSa_But.x_array = [item.r for item in PPset.spectra]
        self.Fit_PlSa_But.y_array = [item.fit_mag for item in PPset.spectra]
        self.Fit_PlSa_But.z_array = [item.mag for item in PPset.spectra]
        self.Fit_PlSa_But.comments = [item.comments[:-1] for item in PPset.spectra]
        c1="#L k  chi*k**"+ str(self._kweigth.get())+" exp\n"
        for item in self.Fit_PlSa_But.comments: item.append(c1)
        self.Fit_PlSa_But.ext ="FTMag"


        if self._check_path1.get():
            self.Fitpage2(1)
            #print "yyyyyyyyyyyyyyyyyyyyyyy"
        if self._check_path2.get():
            self.Fitpage2(2)



    def Fitpage2(self,it):
        x_att, y_att, z_att ="x_array","y_array","z_array"
        for n in "ners":
            pa= n+str(it)
            st_attrib = pa +"_PlSa_But"
            #print st_attrib
            bu_attrib= getattr(self, st_attrib)
            #print bu_attrib
            setattr(bu_attrib, x_att, [PPset.x])
            yarray = [[item.fit_res[pa]  for item in PPset.spectra]]
            setattr(bu_attrib, y_att, yarray)
            delta_pa="delta_"+pa
            zarray = [[item.fit_res[delta_pa]  for item in PPset.spectra]]
            setattr(bu_attrib, z_att, zarray)
            commentarray = ["# "+pa +delta_pa  for item in PPset.spectra]
            setattr(bu_attrib, "comments", commentarray)
            setattr(bu_attrib, "error", True)
        return




    def changeplot(self):
        w =self._kweigth.get()
        if self.plotfit.get()=="R":
            self.Fit_PlSa_But.x_array = [item.r for item in PPset.spectra]
            self.Fit_PlSa_But.y_array = [item.fit_mag for item in PPset.spectra]
            self.Fit_PlSa_But.z_array = [item.mag for item in PPset.spectra]
            self.Fit_PlSa_But.comments = [item.comments[:-1] for item in PPset.spectra]
            c1="#L k  chik**"+ str(self._kweigth.get())+"  exp\n"
            for item in self.Fit_PlSa_But.comments: item.append(c1)
            self.Fit_PlSa_But.title = "FT(chi(k)*k**%s)" %w
            self.Fit_PlSa_But.ext =".FitFTMag"
        if self.plotfit.get()=="k":
            self.Fit_PlSa_But.x_array = [item.k for item in PPset.spectra]
            self.Fit_PlSa_But.y_array = [item.fit_chi*item.k**w for item in PPset.spectra]
            self.Fit_PlSa_But.z_array = [item.chi*item.k**w for item in PPset.spectra]
            self.Fit_PlSa_But.comments = [item.comments[:-1] for item in PPset.spectra]
            c1="#L k  chik**"+ str(w)+"  exp\n"
            for item in self.Fit_PlSa_But.comments: item.append(c1)
            self.Fit_PlSa_But.title = "chi(k)*k**%s" %w
            self.Fit_PlSa_But.ext ="Fitk"





#######################################################################################################
class XDEF:
    def __init__(self, genitore):
              #-------------------------------    declare    ----------------------------------------------
        #self._x    = StringVar()
        self.synch_title =StringVar()          #define the label of plot
        self._plot =StringVar()                #define the type of plot
        self.prop_label= ('index')             #,'elapsed time: min','elapsed time: sec'
        #self._check_n1  = IntVar()            #define if the corresponding parameter is refined
        #self._check_s1  = IntVar()            #define if the corresponding parameter is refined
        #self._Rend   = StringVar()            #entry for fit parameters
      #---------------------------------  set      ------------------------------------------
        #self._x.set("index")
        self.synch_title.set("")
        self._plot.set("index")
        self.prop_label= ('index')             #,'elapsed time: min','elapsed time: sec'
      #---------------------------------  define x      ------------------------------------------
        #self.quadro_x = LabelFrame(genitore, text = "Define abscissa")    #,text = "Correction"
        #self.quadro_x.pack(side = TOP,  fill = X, pady= 3, ipadx = 5, ipady = 3)
        #self.combo_x= ttk.Combobox(self.quadro_x , state="readonly",   textvariable=self._x,
        #             values=))
        #self.combo_x.pack(side = LEFT ,anchor = E, pady=5, padx = 5, ipadx = 1)
        #self.button_defx = Button(self.quadro_x,
        #                              command = self.Define,
        #                              text = "Define" ,
        #                              background = "green",
        #                              width = 10,
        #                              padx = "3m",
        #                              pady = "1m")
        #self.button_defx.pack(side = LEFT, anchor = W, padx = 5, pady = 5)
      #---------------------------------  plot T1      ------------------------------------------
        self.quadro_plot = LabelFrame(genitore, text = "synch. plot")    #,text = "Correction"
        self.quadro_plot.pack(side = TOP,  fill = X, pady= 3, ipadx = 5, ipady = 3)
        self.combo_plot= ttk.Combobox(self.quadro_plot , state="readonly",   textvariable=self._plot, 
                     values=self.prop_label)    
        self.combo_plot.bind('<<ComboboxSelected>>',self.Synchplot)

        self.combo_plot.pack(side = LEFT ,anchor = E, pady=5, padx = 5, ipadx = 1)
        self.Plot_PlSa_But=ut.PloteSaveB(self.quadro_plot, ext="" ,comment= None, title= "pippo ") #str(self.synch_title))
      #---------------------------------  perform        ------------------------------------------

    #def Define(self):
    #    xset= self._x.get()
    #    if   xset=="elapsed time: min":
    #        x = numpy.array([item.start_time_ep for item in PPset.spectra])
    #        x-= x[0]
    #        x/= 60
    #        xlabel= "min"
    #    elif xset=='elapsed time: sec':
    #        x = numpy.array([item.start_time_ep for item in PPset.spectra])
    #        x-= x[0]
    #        xlabel= "sec"
    #    elif xset=="index":
    #        PPset.x=range(1,len(PPset.spectra)+1)
    #        xlabel= "index"
    #    else: print "ERROR", xset    
    #    self.Synchplot(self._plot.get())



    def Synchplot(self, evt):
        xset= evt
        if isinstance(xset, Event): 
                   xset=self._plot.get()
        #print "defined x " ,self._x.get()        
        print "defined y " ,xset, "\n"
        self.Plot_PlSa_But.x_array= [PPset.x]
        self.Plot_PlSa_But.comments=[]
        self.Plot_PlSa_But.comments.append(PPset.spectra.header)

        if xset=="index":
            y=range(1,len(PPset.spectra)+1)
            self.Plot_PlSa_But.y_array= [y]
            self.Plot_PlSa_But.title= xset+" vs   index"
        else:
            y=PPset.spectra.other_pro[xset]
            self.Plot_PlSa_But.y_array= [y]
            self.Plot_PlSa_But.title= xset+" vs   index"
            
        self.Plot_PlSa_But.comments[0].append( "#  index" +xset+"\n")#
        
        
        
        
        

#######################################################################################################
class Tscan:
    def __init__(self, genitore):
        global path
        global Dis_coeff
        global inivar
        
        
        
        
        readini()
             

        Dis_coeff=[None,None,None]
        path=list()
        x=[]

        #menu
        self.menu=mymenu(genitore)
        self.menu.filemenu.entryconfig(index=0, command= lambda : self.Setlimit("opensf")) 
        self.menu.derivative.entryconfig(index=0, command= lambda : self.num_deriv(True)) 
        self.menu.derivative.entryconfig(index=1, command= lambda : self.num_deriv(False))         



        self.nb = ttk.Notebook(genitore)
        self.nb.pack()


        # beamline
        self.p1 = Frame(self.nb)
        self.nb.add(self.p1 , text="beamline")

        self.nb_beamline = ttk.Notebook(self.p1)
        self.nb_beamline.pack(expand=Y, fill=Y)
        #----------------------------------------------------------------------
        self.p_QE_generic =Frame(self.nb_beamline)  
        self.nb_beamline.add(self.p_QE_generic, text="Generic QEXAFS")
        self.QE_gen= PPInput.Gen_QE(self.p_QE_generic)
        self.QE_gen.filesel.pulsanteA.configure(command= lambda i="QE_GEN": self.Setlimit(i))
        #----------------------------------------------------------------------
        #self.p_QE_spec =Frame(self.nb_beamline)  
        #self.nb_beamline.add(self.p_QE_spec, text="SPEC single")
        #self.QE_spec= Spec_QE(self.p_QE_spec)
        #self.QE_spec.filesel.pulsanteA.configure(command= lambda i="SPEC": self.Setlimit(i))
        #----------------------------------------------------------------------
        #self.p_bm29 =Frame(self.nb_beamline) 
        #self.nb_beamline.add(self.p_bm29, text="BM29")
        #self.QEcal= QEcal(self.p_bm29)
        #self.QEcal.filesel.pulsanteA.configure(command= lambda i="BM29f": self.Setlimit(i))   
        #self.QEcal.dirsel.pulsanteA.configure(command= lambda i="BM29d": self.Setlimit(i))   
        #----------------------------------------------------------------------
        #self.p_samba =Frame(self.nb_beamline)  
        #self.nb_beamline.add(self.p_samba, text="SAMBA")
        #
        #self.Samba= SambaQE(self.p_samba)
        #self.Samba.filesel.pulsanteA.configure(command= lambda i="SAMBAf": self.Setlimit(i))   
        #self.Samba.dirsel.pulsanteA.configure(command= lambda i="SAMBAd": self.Setlimit(i))   
        #----------------------------------------------------------------------
        self.p_id24 =Frame(self.nb_beamline) 
        self.nb_beamline.add(self.p_id24, text="ID24")

        self.Disp_calibration = PPInput.DispCal(self.p_id24)
        self.Disp_calibration.filesel.pulsanteA.configure(command= lambda i="ID24": self.Setlimit(i))
        
       #  Averages
        self.p2 = Frame(self.nb)
        self.nb.add(self.p2, text="Averages")
        self.Avesel= PPAvesel.Avesel(self.p2)
        self.Avesel.pulsante_Aver.configure(command = self.SelAver2)
       #  XANES
        self.p3 = Frame(self.nb)
        self.nb.add(self.p3, text="XANES")
        self.XAN= PPXanes.XANES(self.p3)
        self.nb.pack()
       #EXAFS-FT
        self.p4=Frame(self.nb)
        self.nb.add(self.p4, text="EXAFS-FT")
        self.EXAFT= PPExafs.EXAFT(self.p4)
       # FIT
        self.p5=Frame(self.nb)
        self.nb.add(self.p5, text="FIT")       
        self.EXAFT= FIT(self.p5)
       # DefineX
        self.p6=Frame(self.nb)
        self.nb.add(self.p6, text="DEFINE X")
        self.XDEF= XDEF(self.p6)
      #-------------------------------------set page-------------------------
        #self.nb.raise_page("page1")


################################ functions global ############################################

    def Setlimit(self,beamline):
        if beamline=="BM29f":
            self.QEcal.browse_command2("Fil") 
        elif beamline=="BM29d":
            self.QEcal.browse_command2("Dir")              
        if beamline=="SPEC":
            self.QE_spec.browse_command2()            
        elif beamline=="SAMBAf":
            self.Samba.browse_command2("Fil") 
        elif beamline=="SAMBAd":
            self.Samba.browse_command2("Dir")             
        elif beamline=="QE_GEN":
            self.QE_gen.browse_command2()
        elif beamline=="ID24":
            self.Disp_calibration.browse_command2()            
        elif beamline=="opensf":
            self.menu.opensfile()
            self.nb.select(1)
        self.Avesel._from_tof.set("1-"+str(len(PPset.filesel_spectra)))
        self.Avesel.before.set((min(PPset.filesel_spectra[0].E)))
        self.Avesel.after.set((max(PPset.filesel_spectra[0].E)))
        pass

    def SelAver2(self):
        self.Avesel.Perform()
        if len(PPset.spectra)>0:
            self.XAN._deriv_start.set(round(min(PPset.spectra[0].E),3))
            self.XAN._deriv_end.set(round(max(PPset.spectra[0].E),3))
            self.XAN._INTxan_start.set(round(min(PPset.spectra[0].E),3))
            self.XAN._INTxan_end.set(round(max(PPset.spectra[0].E),3))
            self.XDEF.combo_plot.config(values=PPset.spectra.other_pro.keys())
            
            
        pass
    
    def num_deriv(self,x):
        self.menu.num_deriv(x)
        for wgt in self.p3.pack_slaves():
            wgt.destroy()
        del self.XAN
        self.XAN= PPXanes.XANES(self.p3)
        self.nb.pack()
        if spectra != []:
            self.XAN._deriv_start.set(round(min(PPset.spectra[0].E),3))
            self.XAN._deriv_end.set(round(max(PPset.spectra[0].E),3))
            self.XAN._TCW_start.set(round(min(PPset.spectra[0].E),3))
            self.XAN._TCW_end.set(round(max(PPset.spectra[0].E),3))
            self.XAN._INTxan_start.set(round(min(PPset.spectra[0].E),3))
            self.XAN._INTxan_end.set(round(max(PPset.spectra[0].E),3))        
        
    

        
#########################################################################################################
##############   Inizialization   ############################################################  
def readini():
    global inivar
    if os.name =="nt":
         path_local_data=os.path.join(os.environ['APPDATA'],"PrestoPronto")
    elif os.name =="posix":
         path_local_data="~/.local/bin"
    else :
        if __verbose__:
            print os.name, "  sistem not defined"     
            
    inifile=os.path.join(path_local_data,"PrestoPronto.ini")
    if __verbose__:  print inifile
    #try:
    inivar.read(inifile)
    if __verbose__ : print os.getcwd()
    #except :
    #    if __verbose__ : print "no ini file found"
    #    inivar=ConfigParser.ConfigParser()
    #    inivar.add_section("PrestoPronto")
    #    inivar.set("PrestoPronto", "PrestoPronto_Dir", os.getcwd())
    #    writeini() 
    #    return
        
    if inivar.has_section("PrestoPronto"):
        if os.access(inivar.get("PrestoPronto", "Start_Dir"), os.F_OK):
            os.chdir(inivar.get("PrestoPronto", "Start_Dir"))
        else:
            os.chdir(os.path.join(os.environ['HOMEDRIVE'],os.environ['HOMEPATH']))
    else:
       inivar.add_section("PrestoPronto")
       inivar.set("PrestoPronto", "PrestoPronto_Dir", os.getcwd())
       os.chdir(os.path.join(os.environ['HOMEDRIVE'],os.environ['HOMEPATH']))
    return    
           
#################   Inizialization   ############################################################ 
def writeini():
    global inivar
    inivar.set("PrestoPronto", "Start_Dir", os.getcwd())
    if os.name =="nt":
         path_local_data=os.path.join(os.environ['APPDATA'],"PrestoPronto")
    elif os.name =="posix":
         path_local_data="~/.local/bin"
    if not(os.access(path_local_data, os.F_OK)):
         os.mkdir(path_local_data)   
         
    inifile=os.path.join(path_local_data,"PrestoPronto.ini")     
    with open(inifile, 'w') as configfile:
        inivar.write(configfile)     
        configfile.close
    pass    


def destroy():
    print "\n\n\n\nhave a nice day.....  ;-) \n\n"
    writeini()
    radice.quit()


if __name__ == "__main__":
   radice = Tk()
   radice.title("PrestoPronto GUI")
   pippo = Tscan(radice)
   radice.protocol("WM_DELETE_WINDOW", destroy)
   radice.mainloop()
   


   
   
